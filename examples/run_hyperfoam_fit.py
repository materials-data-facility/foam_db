#
# Run a Baysian Optimization to find the material parameters 
# for VN600 foam at quasistatic rate with the N=2 hyperfoam model
#
# Alex Landauer, NIST MML MMSD, Dec. 2023
#
import pandas as pd
import numpy as np
import subprocess as sp
import matplotlib.pyplot as plt
from matplotlib import gridspec
import requests
import h5py
import pickle
from fit_hyperfoam import *
from scipy import signal as spsg
from bayes_opt import BayesianOptimization
from bayes_opt import UtilityFunction
from bayes_opt.logger import JSONLogger
from bayes_opt.event import Events
from bayes_opt.util import load_logs

# Parameter space to explore: based on physical limits of the drop tower. 
# example data from Poron 125 (from Landauer et al 2019) for reference
# mu0   a0   mu1  a1   b0    b1
#24400,8.31,4180,1.39,0.154,7.71
bounds = {'mu0':(500.0,100000.0), 'a0':(0.0001,10.0),'mu1':(500.0,100000.0), 'a1': (0.0001,10.0), 'b0': (-0.20,10), 'b1': (-0.20,10)}

#read in stress and strain data
data_location = 'https://data.materialsdatafacility.org/mdf_open/foam_db_v1.1/quasistatic_rate_data/VN01/VN01_001_003_QS06_00/VN01_001_003_QS06_00_dic.mat'
dest = "./VN01_001_003_QS06_00_dic.mat"

#save data to local directory
r = requests.get(data_location)
open(dest , 'wb+').write(r.content)

# Set up the optimizer function
optimizer = BayesianOptimization(
    f=hyperfoam_objective_function,
    pbounds=bounds,
    verbose=2,
    random_state=5
)

# Log results
logger = JSONLogger(path="./logs.log")
optimizer.subscribe(Events.OPTIMIZATION_STEP, logger)

#define the acquisition function for the optimization: this seems 
#to work well, but it's not too sensitive. It's relatively cheap to 
#run a large number of iterations
acq_function = UtilityFunction(kind="ei", xi=0.001)

# Maximize the function
optimizer.maximize(
    init_points=128,
    n_iter=1024,
    acquisition_function = acq_function
)

# Print the results
print("\n\n")
print(optimizer.max)
opt_settings = optimizer.max

# Save the results to file
with open('hyperfoam_fit_params.txt', 'w') as file:
    file.writelines( str(optimizer.max) )
#print("\n\n")
#print(optimizer.res)

# Make arrays of the experiment data - messy but good enough for the plotting
x = np.array([-0.0,    0.00064062, 0.00335158, 0.00601635, 0.00866658, 0.01129718,
 0.01395986, 0.01661598, 0.01929081, 0.02199428, 0.02470615, 0.02740952,
 0.03010689, 0.03286229, 0.03560573, 0.03836096, 0.04106293, 0.04377904,
 0.04652189, 0.04927712, 0.05205477, 0.05477582, 0.05755666, 0.06026272,
 0.06300331, 0.06579159, 0.06853281, 0.0712565,  0.07402098, 0.07674918,
 0.07951025, 0.08225859, 0.08503773, 0.0878254,  0.09058635, 0.09339897,
 0.09605311, 0.09882211, 0.10155839, 0.10429848, 0.10700112, 0.10972365,
 0.11243878, 0.1151647,  0.11790058, 0.12058861, 0.12332013, 0.12606183,
 0.12879014, 0.13153347, 0.1342886,  0.13706245, 0.13966325, 0.14228583,
 0.14493469, 0.14757553, 0.15007515, 0.15263989, 0.15519999, 0.15783546,
 0.16043173, 0.16303809, 0.16568507, 0.1682901,  0.17089945, 0.17347567,
 0.17605923, 0.17862738, 0.18118611, 0.18373825, 0.1862727,  0.18877728,
 0.19124805, 0.19375036, 0.19631614, 0.19882408, 0.20134633, 0.20380197,
 0.2062114,  0.20859771, 0.2109736,  0.21337346, 0.21580737, 0.21820751,
 0.22063758, 0.22306553, 0.22545743, 0.22778421, 0.23022146, 0.23263707,
 0.23502494, 0.23739993, 0.23978024, 0.24214908, 0.24452894, 0.24685455,
 0.24917705, 0.25152857, 0.25385102, 0.25622557, 0.25861205, 0.26096134,
 0.26332995, 0.26570801, 0.26806775, 0.2703324,  0.27268375, 0.2750098,
 0.2773199,  0.27965674, 0.28201243, 0.28435972, 0.28668913, 0.28902388,
 0.2913649,  0.29368385, 0.29601019, 0.29833518, 0.30068458, 0.30303514,
 0.30540538, 0.30778362, 0.31014975, 0.31245184, 0.31485617, 0.31719374,
 0.31957971, 0.32192727, 0.32432591, 0.32670334, 0.32904754, 0.33142657,
 0.33377656, 0.33613155, 0.33847445, 0.34082352, 0.34314689, 0.34547672,
 0.34782213, 0.35017619, 0.35251039, 0.35483063, 0.35718811, 0.35954927,
 0.36187799, 0.36421874, 0.36655603, 0.36887551, 0.37119918, 0.37352,
 0.37584405, 0.37815963, 0.38044498, 0.38280865, 0.38512522, 0.38742766,
 0.38973339, 0.39203054, 0.39433056, 0.39664872, 0.39897032, 0.40129367,
 0.40362809, 0.40596689, 0.40830993, 0.41068281, 0.4130485,  0.41542391,
 0.41781996, 0.42021606, 0.42260598, 0.42495487, 0.42736719, 0.42973553,
 0.43217759, 0.43463272, 0.43713307, 0.43961355, 0.44216362, 0.44468681,
 0.44718586, 0.44969166, 0.45224179, 0.45477369, 0.45726718, 0.45975462,
 0.46230082, 0.46487248, 0.46740999, 0.4699683,  0.47252495, 0.47506846,
 0.47764772, 0.48019058, 0.48275278, 0.48539821, 0.4880761,  0.49074739,
 0.49342999, 0.49631152])
y = np.array([4642.12787526,  5886.55173245,  7565.77201169,  8904.26799012,
 10075.19741935, 11170.09755899, 12183.79730384, 13129.0619273,
 14091.5025883,  14896.26989546, 15735.992279,   16557.46591199,
 17286.31298246, 18011.26936323, 18740.88010824, 19412.84489489,
 20064.1313185,  20695.0450124,  21248.98059708, 21822.58872768,
 22376.67465699, 22903.5090879,  23445.47760968, 23968.76633944,
 24474.42875692, 24945.62861821, 25378.7373341,  25845.7753232,
 26298.67987071, 26755.40568621, 27190.55444985, 27597.44643536,
 28052.38705288, 28421.27247383, 28871.8055874,  29238.99946892,
 29675.1894486,  30047.20888431, 30468.96619416, 30880.43449143,
 31236.76023856, 31626.52187905, 32008.48765523, 32349.96303335,
 32762.86976958, 33182.30263207, 33513.11183576, 33947.76629494,
 34331.06569705, 34714.05789919, 35118.89501462, 35454.8331739,
 35839.48483039, 36248.48430756, 36672.48395995, 37050.03653589,
 37460.84525992, 37865.78726819, 38251.07598414, 38665.3051788,
 39080.99520237, 39483.23266539, 39910.31174793, 40348.07920402,
 40742.25006877, 41188.79549986, 41633.37392588, 42047.5544181,
 42493.43999102, 42938.28823636, 43406.56214845, 43809.30131481,
 44308.28016613, 44800.91660752, 45197.15585751, 45699.74245654,
 46191.37112549, 46629.95522633, 47108.81635617, 47627.9393574,
 48141.31172354, 48647.67828222, 49188.50398725, 49671.99928344,
 50234.22753567, 50771.15679894, 51276.85691854, 51822.13311353,
 52395.67171925, 53005.78959996, 53535.74327276, 54075.68843741,
 54718.31706661, 55223.16258061, 55862.64433954, 56438.14606783,
 57043.20263512, 57699.97753941, 58266.78728832, 58864.9173055,
 59507.71826642, 60163.39165553, 60831.13575582, 61470.48259022,
 62174.33392651, 62821.16204921, 63518.47992151, 64221.81038493,
 64887.45290734, 65622.34990462, 66322.02435066, 67054.5014797,
 67825.47601038, 68551.19473999, 69274.83765531, 70096.14836698,
 70872.36777527, 71613.55093404, 72401.72857228, 73250.69499117,
 74026.27729771, 74849.99297885, 75709.29880523, 76537.14269814,
 77412.33279641, 78287.25355569, 79098.38107103, 80009.67090124,
 80897.95882046, 81863.11365632, 82784.88596033, 83739.55092166,
 84719.04660344, 85599.48185609, 86604.34023908, 87599.33126598,
 88597.95110887, 89594.95748484, 90649.2713998,  91648.01733421,
 92760.00557943, 93815.79468844, 94913.95549383, 95980.82031236,
 97099.96476198, 98268.81852208, 99450.9790835, 100551.62656532,
 101740.9947307, 102963.81231443, 104201.35087356, 105464.24067127,
 106653.26001882, 107927.75937133, 109254.97195674, 110563.75990091,
 111899.26820381, 113242.94554787, 114604.8860783, 115980.45782768,
 117390.90433916, 118842.24643264, 120304.09020148, 121797.41764387,
 123284.04862088, 124835.37228941, 126391.44186454, 127946.30381212,
 129532.84381534, 131178.0187585, 132830.70821461, 134526.55326948,
 136201.27954169, 137973.76836316, 139721.40909404, 141544.18761105,
 143314.70642644, 145195.04996352, 147109.04868043, 149028.19557155,
 150942.67629266, 152956.38867781, 154940.35164853, 156974.39344742,
 159105.822312, 161297.08154419, 163430.30740655, 165654.64537955,
 167878.86056122, 170192.42653941, 172572.40248244, 174992.05111903,
 177447.15542252, 179885.92354824, 182411.70615826, 185010.99514482,
 187615.16559376, 190283.84698927, 193026.9740599, 195710.82618431])



#read in stress and strain data
data_location = 'https://data.materialsdatafacility.org/mdf_open/foam_db_v1.1/quasistatic_rate_data/VN01/VN01_001_003_QS06_00/VN01_001_003_QS06_00_dic.mat'
dest = "./VN01_001_003_QS06_00_dic.mat"

r = requests.get(data_location)
open(dest , 'wb+').write(r.content)
dic_data = h5py.File(dest)

# compute stresses and stretches
T_exp = -1.0e6*(np.array(dic_data['complete_data']['eng_stress']))
T_exp = np.transpose(T_exp[0:200,0])
L_0 = np.array(dic_data['complete_data']['E'][0, 0:200])
L_1 = np.array(dic_data['complete_data']['E'][1, 0:200])

# collect the best-fit parameters and run the prediction
mu0 = optimizer.max["params"]["mu0"]
mu1 = optimizer.max["params"]["mu1"]
a0 = optimizer.max["params"]["a0"]
a1 = optimizer.max["params"]["a1"]
b0 = optimizer.max["params"]["b0"]
b1 = optimizer.max["params"]["b1"]
y_pred = hyperfoam_stress_function(L_0, L_1, mu0, a0, mu1, a1, b0, b1)

# plot the experiment and model
fig = plt.figure(figsize=(16, 10))
gs = gridspec.GridSpec(2, 1, height_ratios=[3, 1]) 
axis = plt.subplot(gs[0])
#acq = plt.subplot(gs[1])

axis.plot(x, y, linewidth=3, label='Target')
axis.plot(x, y_pred, 'D', markersize=8, label=u'Observations', color='r')
